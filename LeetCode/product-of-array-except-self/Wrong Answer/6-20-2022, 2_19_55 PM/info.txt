{"id":726595881,"lang":"cpp","time":"2 weeks, 1 day","timestamp":1655714995,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/726595881/","is_pending":"Not Pending","title":"Product of Array Except Self","memory":"N/A","code":"class Solution {\npublic:\n    vector<int> productExceptSelf(vector<int>& nums) {\n        vector<int> vec;\n        int count1=count(nums.begin(),nums.end(),0);\n        \n        if(count1==0){\n            int product=1;\n            for(int i=0;i<nums.size();i++){\n                product=product*nums[i];\n                \n                \n            }\n            \n            for(int i=0;i<nums.size();i++){\n                // product=product*nums[i];\n                vec.push_back(product/nums[i]);\n                \n            }\n        }else{\n            int position=0;\n            int product=1;\n            for(int i=0;i<nums.size();i++){\n                if(nums[i]==0){\n                    \n                    position=i;\n                    \n                } else{\n                    product=product*nums[i];\n                }\n            \n            }\n            \n            for(int i=0;i<position;i++){\n                vec.push_back(0);\n\n            }\n            vec.push_back(product);\n            for(int i=position+1;i<nums.size();i++){\n                vec.push_back(0);\n            }\n        }\n        return vec;\n        \n    }\n};","compare_result":"11011110011011101111","title_slug":"product-of-array-except-self"}